name: Merge to Main Pipeline

on:
  push:
    branches:
      - "main"  # Trigger when there is a push to the main branch
    paths:
      - '**'  # Can be adjusted to only run for certain files

jobs:
  # Job for build process
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Python with Poetry
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Install Poetry
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      # Cache Poetry dependencies
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # Install dependencies and package
      - name: Install dependencies and package
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry install
          poetry build

  # Job for running tests and collecting coverage
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Python with Poetry
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Install Poetry
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      # Install dependencies
      - name: Install dependencies
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry install

      # Run unit tests with coverage
      - name: Run tests with coverage
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry run pytest
          # poetry run pytest --cov=cli --cov=server --cov=database --cov-report=xml --cov-report=term --cov-omit="tests/*" --cov-branch --disable-warnings

      # Check if coverage is >= 60%
      # - name: Enforce coverage threshold
      #   run: |
      #     coverage_percentage=$(poetry run coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
      #     if [ "$coverage_percentage" -lt 60 ]; then
      #       echo "Code coverage is below 60%. Failing the workflow."
      #       exit 1
      #     fi

      # Upload coverage report
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ./test-results

  # Job for static analysis with Flake8
  flake8:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Python with Poetry
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Install Poetry
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      # Install dependencies
      - name: Install dependencies
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry install

      - name: Run Flake8
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry run flake8 --max-line-length=120

      - name: Upload Flake8 report
        uses: actions/upload-artifact@v4
        with:
          name: flake8-report
          path: ./flake8-report.txt

    # Job to generate documentation
  
  # Job for generate documentation
  docs:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Python with Poetry
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Install Poetry
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      # Install dependencies using Poetry
      - name: Install dependencies
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry install

      # Generate documentation (example with Sphinx)
      - name: Generate Documentation
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry run sphinx-build -b html docs/source docs/_build/
          
      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: generated-docs
          path: docs/_build/

